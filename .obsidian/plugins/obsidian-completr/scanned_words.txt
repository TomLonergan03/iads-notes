is
iff
if
intend
instructions
its
inputs
itself
inner
it
in
into
important
implementation
inequality
implemented
increase
instead
involve
item
inserting
insert
isEmpty
issue
inserted
involves
inverts
ixU
iH
ii
iKa
iKb
internet
or
of
operations
on
only
occurs
occur
ops
once
operation
overflowing
occasionally
occasional
often
options
overhead
one
otherwise
original
originally
our
other
oO
oRGbbb
oE
oy
oP
oH
order
out
opposite
origin
others
ordering
orderings
there
that
than
to
the
time
taken
times
total
this
then
therefore
themselves
their
these
they
try
true
trivially
tends
take
takes
timing
tables
table
thread
through
tree
top
tweaked
though
tuu
tPx
tH
ttt
tr
tP
travelling
traversal
trees
traversed
topological
tasks
some
smaller
so
sorting
specifically
sometimes
say
smallest
sorted
statements
still
several
small
states
saying
show
satisfied
such
since
size
setting
shuffled
strengths
set
stack
simply
shrink
specific
should
same
start
stay
something
sub
solving
second
swapping
swaps
search
sort
sss
sx
sV
sG
structure
streets
sparse
starting
speed
single
sequence
started
multiple
matter
many
must
model
measure
models
may
memory
metrics
most
making
means
more
maximum
mean
methods
maps
main
move
max
min
missing
maintain
moves
middle
mJ
mS
mST
mSX
mR
mm
mY
mathematical
matrix
much
eventually
execute
each
elements
exactly
element
efficiency
equivalent
every
either
entire
extensible
elsewhere
ever
end
efficiently
encounter
empty
expected
existing
examples
error
except
extracting
else
eWe
et
edges
edge
exists
especially
entry
explored
explore
expanding
example
bounded
by
below
best
between
being
break
behaviour
but
beat
be
bigger
backwards
both
before
binary
bottom
black
balanced
badly
bddD
bcc
bbb
bb
bnnN
beginning
been
above
asymptotically
as
and
are
algorithmic
about
algorithms
actual
amount
algorithm
average
at
always
attained
an
already
analysis
applied
array
assume
any
all
advantages
arrays
after
allocating
allocated
append
actually
amortised
appends
also
added
adding
additional
asymptotics
answer
amm
accS
aaa
arrows
adjacent
adjacency
allows
no
number
not
needed
new
normal
now
next
nearly
node
negligible
nm
nP
networks
network
neighbours
what
ways
we
will
were
worst
when
way
while
which
with
well
weaknesses
was
where
whichever
works
www
wJJ
wM
wo
wr
webpages
whose
Defined
Different
Datastructures
Delete
DB
DEE
DFF
DKK
Ddd
Djj
DHH
Depth
DFS
Directed
DAG
Can
CPU
Create
Calculating
Condition
CCC
Cd
Comparison
Check
consider
compare
cost
care
could
comparisons
case
comparison
can
capture
chosen
combine
combined
copy
copied
capacity
copies
cells
contains
check
common
call
conquering
combining
calculate
compares
children
complete
create
consistent
creating
calling
creates
child
constructing
construct
choosing
come
cA
cT
cK
cG
cccxxx
cF
consisting
computer
computers
connections
connecting
containing
checking
close
chain
contain
comes
cycles
completed
larger
lower
likely
line
list
length
loop
language
likewise
lists
limit
linked
last
lookup
location
looking
look
low
large
less
leaves
layer
left
leftmost
leaf
like
limited
lEgO
lY
lQQ
lines
upper
use
useful
usage
until
untrue
uncertain
unused
used
using
unique
up
uses
uQ
utt
uJ
uu
undirected
us
for
focus
from
fewer
functions
function
formula
formal
fixed
forwards
factor
front
first
foreknowledge
found
full
forward
filled
finite
form
final
fZ
fU
fff
fT
faster
following
find
flood
far
forest
There
Typically
The
This
Therefore
Thus
Then
True
These
Theorem
TM
TegS
TVV
TUU
TWW
Topological
Task
possible
purposes
performed
program
performance
perform
provided
platform
plot
point
proof
pick
preset
programs
performing
per
probing
perfect
produced
probes
pattern
problem
problems
parents
parent
priority
pointer
pivot
partitioning
partition
performs
pwr
pB
ppp
pvvFrr
puu
pmH
produce
points
various
values
value
viewing
vE
va
vvvU
vDbb
vPvU
vow
vm
vvv
vertices
variety
vertex
visits
visualised
visiting
visited
visit
kinds
know
keys
key
keeping
kc
kkk
kW
We
Worst
When
WU
WW
definition
different
disk
decide
differing
depending
discussed
dependent
define
differ
doesn
delete
does
designing
difficult
do
doing
divide
depends
direct
dgg
dee
directed
dense
directions
down
defined
during
depend
done
dependencies
how
have
halves
holds
however
has
hashmap
hash
hashing
hashes
heap
highest
hhh
ht
hL
hold
hyperlinks
having
runtime
runtimes
run
runs
resulting
respective
read
risk
reach
removed
removing
reference
reading
requires
return
returns
recursion
results
recursive
recurrence
relation
reorder
remain
requirements
repeatedly
remaining
removes
root
replaces
returned
red
rightmost
recursively
range
random
rtt
ru
rDC
represented
represent
road
representations
reachable
rest
reverse
recorded
Even
Example
Extensible
Each
EISS
EFF
EE
EUY
Eu
An
Asymptotic
Any
Algorithms
All
Asymptotics
Aaa
AVV
Adjacency
Also
Animation
Acyclic
InsertSort
Is
In
If
Informally
Insert
Introduction
IHDR
IHHP
IDOO
Im
IHLLTY
IDAT
ICC
Idd
IUU
IMM
III
IJJ
IEND
Implementation
Yes
YY
YYY
given
graph
general
getting
get
go
gets
good
greater
grouped
give
ggg
gjj
graphs
Best
Basically
BP
BWW
BPTT
BU
Bu
BBB
Bnn
BCC
BM
Breadth
BFS
quantitative
queues
queue
qC
ql
qq
MergeSort
Method
Merge
Most
Made
Master
Mi
MQ
However
How
Heapify
HOO
HMM
Hw
Hhh
HNN
HOOg
Hpp
HUU
HZZ
HHH
Rigorous
Rigorously
Recursion
RPP
RBU
Re
Rx
Rl
RA
First
Fixed
Fast
Fyy
FKNN
Fedd
FMM
FDGG
Forests
For
Lists
Linked
Likewise
LJ
LMMI
Stacks
Sometimes
So
Sp
Saii
Si
Space
Sparse
Notes
NG
NK
Nvvp
Nq
Ni
Nm
Obsidian
OOO
OO
Ojoo
Oi
Ob
OG
Probing
Peek
Partition
PNG
PTTD
PQ
PE
Ph
Pg
PL
PQQ
PYY
Given
Gp
GGG
Gx
Gii
GM
GQQ
GF
Graphs
Graph
Generally
Grey
just
jgc
jkk
jd
jr
junctions
Using
UEGGG
UF
Uaa
UIII
UU
Uses
QuickSort
QeD
Qq
QQ
QYYI
you
ys
yyy
yLL
yS
KKKt
KO
Kw
Ks
Kzz
KKKH
KE
KJJ
KEO
KW
KKK
VVVl
VN
VSS
VQUUE
Visit
ZR
Zx
ZD
ZT
ZS
Ji
JLL
Jw
Jd
JE
XO
XYYI
zo
zjR
xxx